2024/12/21 Todoアプリ
------------------------------------------------------------------------------------------------------------------------
Q.上記コードの続きに文字列を格納する変数を定義したいのですがエラーになる
String tasks = scanner.nextLine();

A.改行文字をクリアする

    Scanner scanner = new Scanner(System.in); // Scannerインスタンスを取得
    System.out.println("タスクの内容を入力してください");

    // 改行をクリア
    scanner.nextLine();

    // 入力を受け取る
    String task = scanner.nextLine();

エラーの原因は、scanner.nextLine() が使用される際に、**直前の scanner.nextInt() の改行（Enter）**がバッファに残っているためです。
scanner.nextInt() は数値だけを読み取りますが、改行文字（\n）がバッファに残るため、
次に scanner.nextLine() を呼び出すと、改行文字をそのまま読み込んでしまい、期待した入力を受け取ることができません。

まとめ
nextInt()：数値を読みとるがバッファに残る改行を処理しない
nextLine()：改行を読み取る→余計な"nextLine()の呼び出し"が必要
------------------------------------------------------------------------------------------------------------------------
Q.Scannerクラスはメソッドごとにnewしたほうがいいか
A.非推奨
代用策として、scannerを引数としてメソッドに渡してあげる

Scannerは、内部で入力ストリーム（例：System.in）にアクセスするオブジェクトを使用しています。
これを複数回newすると、ストリームが何度もオープンされることになり、予期せぬ動作やリソース浪費につながる可能性があります。
------------------------------------------------------------------------------------------------------------------------
Q.リストに格納した文字列を出力する方法
A.①拡張for,②通常for,③forEach(ラムダ式),④メソッド参照
①
for (String item : stringList) {
    System.out.println(item);
}
②
for (int i = 0; i < stringList.size(); i++) {
    System.out.println("Index " + i + ": " + stringList.get(i));
}
③
stringList.forEach(item -> System.out.println(item));
④
stringList.forEach(System.out::println);
------------------------------------------------------------------------------------------------------------------------
Q.メソッド参照とラムダ式とは
A.ラムダ式：匿名関数(名前のない関数)を表現
覚えること
①構文：(引数) -> {処理内容}
n -> n * 2　//数値を2倍にする関数
() -> System.out.println("Hello"); //引数なしのラムダ式
List.forEach( s -> System.out.println(s)); //リストの出力

A.メソッド参照：ラムダ式の簡略系
覚えること
①構文：クラス名::メソッド名 //静的メソッドを参照
list.forEach(System.out::println);
②インスタンス名::メソッド名 //インスタンスメソッドを参照
list.forEach(String::toUpperCase); //文字列を大文字にする
③クラス名::new //コンストラクタを参照
// ラムダ式
names.stream().map(name -> new Person(name)).forEach(System.out::println);
// メソッド参照
names.stream().map(Person::new).forEach(System.out::println);
------------------------------------------------------------------------------------------------------------------------
Q.forEachとはなに
A.コレクションや配列などの要素を順番に処理するメソッド
collection.forEach(action);
------------------------------------------------------------------------------------------------------------------------
Q.例外を組み込むときの考え方
1.例外の目的を理解する
・プログラムがエラーで突然終了するのを防ぐ
・エラーの原因を出力(ログを出す)

2.例外がおきそうな箇所を洗い出す
●ユーザの操作ミス
・「数字」を入力するところで「文字」を入力
・範囲外の値を入力
●データがない状態での操作
・空のリストから要素削除
・データが存在しないのに要素検索(アクセス)をする
●外部システムとのやり取り
・ファイルが見つからない
・ネットワーク接続が失敗
----TODOアプリの場合のエラー例----
無効な入力: 数字以外を入力するとき。
リスト範囲外のアクセス: 存在しないタスクを削除しようとするとき。
リストが空: タスクが1件もないのに削除を選択。

3.例外が発生したときの処理を決める
ユーザーに問題を分かりやすく伝える（例: 「無効な入力です」）。
再度入力を促す（例: 「再度正しい番号を入力してください」）。
エラーの詳細はログに記録する（中級者向け）。

4. 例外処理を組み込む（try-catch）
Javaでは、例外が起きそうな箇所を**tryブロックで囲み、
問題が発生したときにcatchブロック**でエラーを処理します。

try {
    // 問題が起きそうな処理
} catch (例外クラス e) {
    // エラーが発生した場合の処理
}

2024/12/22
------------------------------------------------------------------------------------------------------------------------
Q.git branch -M main
A.現在のブランチが master である場合、このコマンドを実行すると、master が main にリネームされます。
------------------------------------------------------------------------------------------------------------------------
Q.git remote -v
A.
origin  https://github.com/zaczac117/todoApp.git (fetch)
origin  https://github.com/zaczac117/todoApp.git (push)

2024/12/24
------------------------------------------------------------------------------------------------------------------------
Q.お前らのSSH Keysの作り方は間違っているの追記
①ls -al ~/.ssh
②ssh-keygen -t ed25519 -C "your_email@example.com"
③cat < ~/.ssh/ed25519.pub | clip
④ssh -T git@github.com

既存のsshキー削除
⑤ rm ~/.ssh/ed25519
------------------------------------------------------------------------------------------------------------------------
Q.gitのブランチの種類について
master(main)ブランチ：新規作成時のデフォルトブランチ,マージのみ行う
developブランチ：開発の中心ブランチ

https://qiita.com/3062_in_zamud/items/8eb8f59c13dbba7863ad
------------------------------------------------------------------------------------------------------------------------
Q.Git-flowとは
https://dev.classmethod.jp/articles/introduce-git-flow/

Q.Git-flow導入
https://qiita.com/azusanakano/items/c5f021497d8f69c00e51
------------------------------------------------------------------------------------------------------------------------